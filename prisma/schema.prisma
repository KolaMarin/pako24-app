// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      AdminRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
  MANAGER
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  phoneNumber String    @unique
  password    String
  location    String
  isBlocked   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]

  @@map("users")
}

model Order {
  id               String        @id @default(uuid())
  userId           String
  additionalInfo   String?
  status           OrderStatus   @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  totalPriceGBP    Float
  totalPriceEUR    Float
  totalCustomsFee  Float
  totalTransportFee Float
  user             User          @relation(fields: [userId], references: [id])
  productLinks     ProductLink[]

  @@map("orders")
}

model ProductLink {
  id            String  @id @default(uuid())
  url           String
  quantity      Int
  size          String
  color         String
  priceGBP      Float
  priceEUR      Float
  customsFee    Float
  transportFee  Float
  orderId       String
  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("product_links")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model ShopCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  shops       Shop[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("shop_categories")
}

model Shop {
  id          String        @id @default(uuid())
  name        String
  description String?
  logoUrl     String?
  website     String?
  active      Boolean       @default(true)
  categoryId  String?
  category    ShopCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("shops")
}

model AppConfig {
  id                String   @id @default(uuid())
  key               String   @unique
  value             String
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("app_configs")
}
